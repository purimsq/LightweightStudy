> Prompt:

I want to build a clean, fast, and minimal music streaming web app that pulls music without using official APIs like YouTube's. I want it to behave like YouTube Music or Spotify but lightweight. Here's how it should work:


---

üéß FEATURES:

1. Search Bar

Let users search for any song (e.g., ‚ÄúRihanna Diamonds‚Äù).

On search, send the query to the backend where it uses yt-dlp to extract audio from YouTube.



2. Streaming

Stream the extracted MP3 file from the backend to the frontend.

Do NOT show YouTube or embed videos.

Make sure no API key is needed ‚Äî this is a cheat/hack-style player.



3. Display

Show the song name and cover art (use the thumbnail from YouTube if available).

Show next/previous buttons with automatic queue.

Use a simple, beautiful audio player UI.



4. Lyrics (Optional) 

If possible, display lyrics below the song (either scrape or hardcode for now).



5. Design Theme

Use white and beige as the primary theme colors (clean and soft).

Ensure the interface is simple and easy to navigate.

Add hover effects and smooth transitions like in Spotify/YouTube Music.

  6. Allow download 
The user should be able to download a song with one click and create playlists to listen to and add songs to her playlist ...this means there should be a place to listen to her offline music or playlist 


üîß BACKEND:
Use yt-dlp to extract audio stream URLs from YouTube.

Do not store anything permanently ‚Äî stream on-demand. Allow download of audio meaning and offline listening page 

The backend should respond to the frontend with:

The audio stream URL,

The title,

The thumbnail (cover art)


üí° IMPORTANT:

The music player should not show that it uses YouTube or make it obvious where the stream is coming from.

There should be no ads, no YouTube branding.

It should feel like a native app ‚Äî no redirecting

Please build the frontend and backend structure cleanly. Add a basic queue so that once one song finishes, the next one starts¬†automatically.